global !p
def capscore(t):
	return '_'.join([ w.upper() for w in re.findall('[A-Z]+[a-z]*', t) ])

def lowerdash(t):
	return '-'.join([ w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t) ])
endglobal

# Require

snippet req "Require const" b
const $1 = require('`!p snip.rv=lowerdash(t[1])`')
endsnippet

# Imports

snippet imp.lib "Import lib module" b
import $1 from '$2`!p snip.rv=lowerdash(t[1])`'
endsnippet

snippet imp.local "Import local module" b
import $1 from '${2:./}${3:$1}'
endsnippet

snippet imp.vars "Import variables from  lib" b
import { $1 } from '$2'
endsnippet

snippet imp.no-from "Import without from" b
import '$1'
endsnippet

snippet imp.classnames "Import classnames" b
import classnames from 'classnames'
endsnippet

snippet imp.classnames.bind "Import bound classnames" b
import bind from 'classnames/bind'
endsnippet

snippet imp.ramda "Import Ramda" b
import '$1' from 'ramda/src/$2'
endsnippet

# Exports

snippet exp "Export from location" b
export $1 from '${2:./}$1'
endsnippet

snippet exp.vars "Export nested" b
export { $1 } from '${2:./}'
endsnippet

snippet exp.function "Export function" b
export ${1:default }function($2) {
	$3
}
endsnippet

snippet exp.function.simple "Export simple function" b
export ${1:default } ($2) => (
	$3
)
endsnippet

# Iters

snippet "\.(map|filter|forEach|reduce)" "Map with an arrow function" r
.`!p snip.rv = match.group(1)`($1 => {
	return $2
})
endsnippet

snippet "\.(map|filter|forEach|reduce)=" "Map with an arrow function inline" r
.`!p snip.rv = match.group(1)`($1 => $2)
endsnippet

# Console

snippet cl "Console.log" b
console.log($1)
endsnippet

snippet clv "Console log variable" b
console.log('$1:', $1)
endsnippet

# ==========================================
# React Snippets
#
snippet rea.class "React class exported" b
import React, { Component, PropTypes } from 'react'

export default class ${1:`!v expand('%:t:r')`} extends Component {
	constructor(props) {
		super(props)

		this.state = {

		}
	}

	render() {
		return (
			${2:<div />}
		)
	}
}

`!v expand('%:t:r')`.propTypes = {
	className: PropTypes.string,
	children: PropTypes.node,
}
endsnippet

snippet rea.function "React function exported" b
import React from 'react'

export default function `!v expand('%:t:r')`($2) {
	return (
		${3:<div>
		</div>}
	)
}
endsnippet

snippet rea.function.simple "React pure export" b
import React, { PropTypes } from 'react'

const `!v expand('%:t:r')` = (${1:props}) => (
	<div${2}>
	</div>
)

`!v expand('%:t:r')`.propTypes = {
	${3}
}

export default `!v expand('%:t:r')`
endsnippet

snippet rea.namespaced-function "React class function" b
$1 = (${2:e}) => {
	$3
};
endsnippet


snippet rea.render "React file with a render" b
import React from 'react'
import { render } from 'react-dom'

import $1 from '${2:./}$1'

render(<$1 />, document.getElementById('${3:app}'))
endsnippet

# Lifecycle functions
snippet lif.cwm "component will mount" b
componentWillMount() {
	$1
}
endsnippet

snippet lif.cdm "component did mount" b
componentDidMount() {
	$1
}
endsnippet

snippet lif.cwrp "component will receive props" b
componentWillReceiveProps(nextProps) {
	$1
}
endsnippet

snippet lif.scu "should component update" b
shouldComponentUpdate(nextProps, nextState) {
	return $1;
}
endsnippet

snippet lif.cwu "component will update" b
componentWillUpdate(nextProps, nextState) {
	$3
}
endsnippet

snippet lif.cdu "component did update" b
componentDidUpdate(prevProps, prevState) {
	$1
}
endsnippet

snippet lif.cwum "component will unmount" b
componentWillUnmount() {
	$1
}
endsnippet

# Prop Types Section

# Inline prop types
snippet pt.a "React PropTypes array" w
PropTypes.array,
endsnippet

snippet pt.ar "React PropTypes array required" w
PropTypes.array.isRequired,
endsnippet

snippet pt.b "React PropTypes boolean" w
PropTypes.bool,
endsnippet

snippet pt.br "React PropTypes boolean required" w
PropTypes.bool.isRequired,
endsnippet

snippet pt.f "React PropTypes function" w
PropTypes.func,
endsnippet

snippet pt.fr "React PropTypes function required" w
PropTypes.func.isRequired,
endsnippet

snippet pt.nu "React PropTypes number" w
PropTypes.number,
endsnippet

snippet pt.nur "React PropTypes number required" w
PropTypes.number.isRequired,
endsnippet

snippet pt.o "React PropTypes object" w
PropTypes.object,
endsnippet

snippet pt.or "React PropTypes object required" w
PropTypes.object.isRequired,
endsnippet

snippet pt.s "React PropType string" w
PropTypes.string,
endsnippet

snippet pt.sr "React PropType string required" w
PropTypes.string.isRequired,
endsnippet

snippet pt.no "React PropTypes node" w
PropTypes.node,
endsnippet

snippet pt.nor "React PropTypes node required" w
PropTypes.node.isRequired,
endsnippet

snippet pt.e "React PropTypes element" w
PropTypes.element,
endsnippet

snippet pt.er "React PropTypes element required" w
PropTypes.element.isRequired,
endsnippet

snippet pt.ao "React PropTypes arrayOf" w
PropTypes.arrayOf(${1:PropTypes.string}),
endsnippet

snippet pt.aor "React PropTypes arrayOf required" w
PropTypes.arrayOf(${1:PropTypes.string}).isRequired,
endsnippet

snippet pt.io "React PropTypes instanceOf" w
PropTypes.instanceOf(${1:PropTypes.string}),
endsnippet

snippet pt.ior "React PropTypes instanceOf required" w
PropTypes.instanceOf(${1:PropTypes.string}).isRequired,
endsnippet

snippet pt.oo "React PropTypes objectOf" w
PropTypes.objectOf(${1:PropTypes.string}),
endsnippet

snippet pt.oor "React PropTypes objectOf required" w
PropTypes.objectOf(${1:PropTypes.string}).isRequired,
endsnippet

snippet pt.one "React PropTypes oneOf" w
PropTypes.oneOf(['$1'$2]),
endsnippet

snippet pt.oner "React PropTypes oneOf required" w
PropTypes.oneOf(['$1'$2]).isRequired,
endsnippet

snippet pt.onet "React PropTypes onOfType" w
PropTypes.oneOfType([
	$1
]),
endsnippet

snippet pt.onetr "React PropTypes onOfType required" w
PropTypes.oneOfType([
	$1
]).isRequired,
endsnippet

snippet pt.sh "React PropTyes shape" w
PropTypes.shape({
	$1
}),
endsnippet

snippet pt.shr "React PropTypes shape required" w
PropTypes.shape({
	$1
}).isRequired,
endsnippet
